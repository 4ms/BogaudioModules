
#include "Inv.hpp"

void Inv::reset() {
	for (int c = 0; c < maxChannels; ++c) {
		_trigger[0][c].reset();
		_trigger[1][c].reset();
	}
}

void Inv::processAll(const ProcessArgs& args) {
	processDualChannel(0);
	processDualChannel(1);
}

void Inv::processDualChannel(int i) {
	int channels = inputs[IN1_INPUT + 2 * i].getChannels();
	outputs[OUT1_OUTPUT + i].setChannels(channels);
	for (int c = 0; c < channels; ++c) {
		bool triggered = _trigger[i][c].process(params[GATE1_PARAM + 2 * i].getValue() + inputs[GATE1_INPUT + 2 * i].getPolyVoltage(c));
		if (params[LATCH1_PARAM + 2 * i].getValue() > 0.5f) {
			if (triggered) {
				_latchedHigh[i][c] = !_latchedHigh[i][c];
			}
		}
		else {
			_latchedHigh[i][c] = false;
		}

		float in = inputs[IN1_INPUT + 2 * i].getPolyVoltage(c);
		if (_latchedHigh[i][c] || _trigger[i][c].isHigh()) {
			in = -in;
		}
		outputs[OUT1_OUTPUT + i].setVoltage(in, c);
	}
}

struct InvWidget : ModuleWidget {
	static constexpr int hp = 3;

	InvWidget(Inv* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SvgPanel *panel = new SvgPanel();
			panel->box.size = box.size;
			panel->setBackground(APP->window->loadSvg(asset::plugin(pluginInstance, "res/Inv.svg")));
			addChild(panel);
		}

		addChild(createWidget<ScrewSilver>(Vec(0, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto gate1ParamPosition = Vec(13.5, 22.0);
		auto latch1ParamPosition = Vec(29.4, 81.9);
		auto gate2ParamPosition = Vec(13.5, 187.0);
		auto latch2ParamPosition = Vec(29.4, 246.9);

		auto gate1InputPosition = Vec(10.5, 44.0);
		auto in1InputPosition = Vec(10.5, 96.0);
		auto gate2InputPosition = Vec(10.5, 209.0);
		auto in2InputPosition = Vec(10.5, 261.0);

		auto out1OutputPosition = Vec(10.5, 134.0);
		auto out2OutputPosition = Vec(10.5, 299.0);
		// end generated by svg_widgets.rb

		addParam(createParam<Button18>(gate1ParamPosition, module, Inv::GATE1_PARAM));
		addParam(createParam<IndicatorButtonGreen9>(latch1ParamPosition, module, Inv::LATCH1_PARAM));
		addParam(createParam<Button18>(gate2ParamPosition, module, Inv::GATE2_PARAM));
		addParam(createParam<IndicatorButtonGreen9>(latch2ParamPosition, module, Inv::LATCH2_PARAM));

		addInput(createInput<Port24>(gate1InputPosition, module, Inv::GATE1_INPUT));
		addInput(createInput<Port24>(in1InputPosition, module, Inv::IN1_INPUT));
		addInput(createInput<Port24>(gate2InputPosition, module, Inv::GATE2_INPUT));
		addInput(createInput<Port24>(in2InputPosition, module, Inv::IN2_INPUT));

		addOutput(createOutput<Port24>(out1OutputPosition, module, Inv::OUT1_OUTPUT));
		addOutput(createOutput<Port24>(out2OutputPosition, module, Inv::OUT2_OUTPUT));
	}
};

Model* modelInv = createModel<Inv, InvWidget>("Bogaudio-Inv", "INV", "Dual signal inverter", "Logic", "Dual", "Polyphonic");
