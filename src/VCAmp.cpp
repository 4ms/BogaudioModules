
#include "VCAmp.hpp"
#include "mixer.hpp"

const float maxDecibels = 12.0f;
const float minDecibels = Amplifier::minDecibels;

void VCAmp::onSampleRateChange() {
	float sampleRate = APP->engine->getSampleRate();
	_levelSL.setParams(sampleRate, MixerChannel::levelSlewTimeMS, maxDecibels - minDecibels);
	_rms.setSampleRate(sampleRate);
}

void VCAmp::process(const ProcessArgs& args) {
	if (inputs[IN_INPUT].active) {
		float level = params[LEVEL_PARAM].value;
		if (inputs[CV_INPUT].active) {
			level *= clamp(inputs[CV_INPUT].value, 0.0f, 10.0f) / 10.0f;
		}
		level *= maxDecibels - minDecibels;
		level += minDecibels;
		_amplifier.setLevel(_levelSL.next(level));
		outputs[OUT_OUTPUT].value = _saturator.next(_amplifier.next(inputs[IN_INPUT].value));
		_rmsLevel = _rms.next(outputs[OUT_OUTPUT].value / 5.0f);
	}
	else {
		_rmsLevel = _rms.next(0.0f);
	}
}

struct VCAmpWidget : ModuleWidget {
	static constexpr int hp = 3;

	VCAmpWidget(VCAmp* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(APP->window->loadSvg(asset::plugin(pluginInstance, "res/VCAmp.svg")));
			addChild(panel);
		}

		addChild(createWidget<ScrewSilver>(Vec(0, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto levelParamPosition = Vec(13.5, 18.0);

		auto cvInputPosition = Vec(10.5, 213.0);
		auto inInputPosition = Vec(10.5, 248.0);

		auto outOutputPosition = Vec(10.5, 286.0);
		// end generated by svg_widgets.rb

		auto slider = createParam<VUSlider>(
			levelParamPosition,
			module,
			VCAmp::LEVEL_PARAM,
			0.0,
			1.0,
			fabs(minDecibels) / (maxDecibels - minDecibels)
		);
		if (module) {
			dynamic_cast<VUSlider*>(slider)->setVULevel(&(module->_rmsLevel));
		}
		addParam(slider);

		addInput(createInput<Port24>(cvInputPosition, module, VCAmp::CV_INPUT));
		addInput(createInput<Port24>(inInputPosition, module, VCAmp::IN_INPUT));

		addOutput(createOutput<Port24>(outOutputPosition, module, VCAmp::OUT_OUTPUT));
	}
};

Model* modelVCAmp = bogaudio::createModel<VCAmp, VCAmpWidget>("Bogaudio-VCAmp", "VCAmp",  "amplifier", AMPLIFIER_TAG);
