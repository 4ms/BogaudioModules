
#include "PolyCon.hpp"

void PolyCon::processAll(const ProcessArgs& args) {
	int cn = clamp(params[CHANNELS_PARAM].getValue(), 1.0f, 16.0f);
	if (inputs[CHANNELS_INPUT].isConnected()) {
		cn = inputs[CHANNELS_INPUT].getChannels();
	}

	outputs[OUT_OUTPUT].setChannels(cn);
	for (int c = 0; c < cn; ++c) {
		outputs[OUT_OUTPUT].setVoltage(clamp(params[CHANNEL1_PARAM + c].getValue(), -1.0f, 1.0f) * 10.0f, c);
	}
}

struct PolyConWidget : ModuleWidget {
	static constexpr int hp = 8;

	PolyConWidget(PolyCon* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SvgPanel *panel = new SvgPanel();
			panel->box.size = box.size;
			panel->setBackground(APP->window->loadSvg(asset::plugin(pluginInstance, "res/PolyCon.svg")));
			addChild(panel);
		}

		addChild(createWidget<ScrewSilver>(Vec(0, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 0)));
		addChild(createWidget<ScrewSilver>(Vec(0, 365)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto channelsParamPosition = Vec(16.0, 43.0);
		auto channel1ParamPosition = Vec(23.3, 78.2);
		auto channel2ParamPosition = Vec(23.2, 115.2);
		auto channel3ParamPosition = Vec(23.2, 152.2);
		auto channel4ParamPosition = Vec(23.2, 189.2);
		auto channel5ParamPosition = Vec(23.2, 226.2);
		auto channel6ParamPosition = Vec(23.2, 263.2);
		auto channel7ParamPosition = Vec(23.2, 300.2);
		auto channel8ParamPosition = Vec(23.2, 337.2);
		auto channel9ParamPosition = Vec(76.7, 78.2);
		auto channel10ParamPosition = Vec(76.7, 115.2);
		auto channel11ParamPosition = Vec(76.7, 152.2);
		auto channel12ParamPosition = Vec(76.7, 189.2);
		auto channel13ParamPosition = Vec(76.7, 226.2);
		auto channel14ParamPosition = Vec(76.7, 263.2);
		auto channel15ParamPosition = Vec(76.7, 300.2);
		auto channel16ParamPosition = Vec(76.7, 337.2);

		auto channelsInputPosition = Vec(54.5, 28.0);

		auto outOutputPosition = Vec(85.5, 28.0);

		auto channel1LightPosition = Vec(31.75, 100.0);
		auto channel2LightPosition = Vec(31.75, 137.0);
		auto channel3LightPosition = Vec(31.75, 174.0);
		auto channel4LightPosition = Vec(31.75, 211.0);
		auto channel5LightPosition = Vec(31.75, 248.0);
		auto channel6LightPosition = Vec(31.75, 285.0);
		auto channel7LightPosition = Vec(31.75, 322.0);
		auto channel8LightPosition = Vec(31.75, 359.0);
		auto channel9LightPosition = Vec(85.25, 100.0);
		auto channel10LightPosition = Vec(85.25, 137.0);
		auto channel11LightPosition = Vec(85.25, 174.0);
		auto channel12LightPosition = Vec(85.25, 211.0);
		auto channel13LightPosition = Vec(85.25, 248.0);
		auto channel14LightPosition = Vec(85.25, 285.0);
		auto channel15LightPosition = Vec(85.25, 322.0);
		auto channel16LightPosition = Vec(85.25, 359.0);
		// end generated by svg_widgets.rb

		{
			auto w = createParam<Knob16>(channelsParamPosition, module, PolyCon::CHANNELS_PARAM);
			dynamic_cast<Knob*>(w)->snap = true;
			addParam(w);
		}
		addParam(createParam<Knob19>(channel1ParamPosition, module, PolyCon::CHANNEL1_PARAM));
		addParam(createParam<Knob19>(channel2ParamPosition, module, PolyCon::CHANNEL2_PARAM));
		addParam(createParam<Knob19>(channel3ParamPosition, module, PolyCon::CHANNEL3_PARAM));
		addParam(createParam<Knob19>(channel4ParamPosition, module, PolyCon::CHANNEL4_PARAM));
		addParam(createParam<Knob19>(channel5ParamPosition, module, PolyCon::CHANNEL5_PARAM));
		addParam(createParam<Knob19>(channel6ParamPosition, module, PolyCon::CHANNEL6_PARAM));
		addParam(createParam<Knob19>(channel7ParamPosition, module, PolyCon::CHANNEL7_PARAM));
		addParam(createParam<Knob19>(channel8ParamPosition, module, PolyCon::CHANNEL8_PARAM));
		addParam(createParam<Knob19>(channel9ParamPosition, module, PolyCon::CHANNEL9_PARAM));
		addParam(createParam<Knob19>(channel10ParamPosition, module, PolyCon::CHANNEL10_PARAM));
		addParam(createParam<Knob19>(channel11ParamPosition, module, PolyCon::CHANNEL11_PARAM));
		addParam(createParam<Knob19>(channel12ParamPosition, module, PolyCon::CHANNEL12_PARAM));
		addParam(createParam<Knob19>(channel13ParamPosition, module, PolyCon::CHANNEL13_PARAM));
		addParam(createParam<Knob19>(channel14ParamPosition, module, PolyCon::CHANNEL14_PARAM));
		addParam(createParam<Knob19>(channel15ParamPosition, module, PolyCon::CHANNEL15_PARAM));
		addParam(createParam<Knob19>(channel16ParamPosition, module, PolyCon::CHANNEL16_PARAM));

		addInput(createInput<Port24>(channelsInputPosition, module, PolyCon::CHANNELS_INPUT));

		addOutput(createOutput<Port24>(outOutputPosition, module, PolyCon::OUT_OUTPUT));

		addChild(createLight<TinyLight<GreenLight>>(channel1LightPosition, module, PolyCon::CHANNEL1_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel2LightPosition, module, PolyCon::CHANNEL2_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel3LightPosition, module, PolyCon::CHANNEL3_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel4LightPosition, module, PolyCon::CHANNEL4_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel5LightPosition, module, PolyCon::CHANNEL5_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel6LightPosition, module, PolyCon::CHANNEL6_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel7LightPosition, module, PolyCon::CHANNEL7_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel8LightPosition, module, PolyCon::CHANNEL8_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel9LightPosition, module, PolyCon::CHANNEL9_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel10LightPosition, module, PolyCon::CHANNEL10_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel11LightPosition, module, PolyCon::CHANNEL11_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel12LightPosition, module, PolyCon::CHANNEL12_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel13LightPosition, module, PolyCon::CHANNEL13_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel14LightPosition, module, PolyCon::CHANNEL14_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel15LightPosition, module, PolyCon::CHANNEL15_LIGHT));
		addChild(createLight<TinyLight<GreenLight>>(channel16LightPosition, module, PolyCon::CHANNEL16_LIGHT));
	}
};

Model* modelPolyCon = createModel<PolyCon, PolyConWidget>("Bogaudio-PolyCon", "POLYCON", "Polyphonic per-channel constant voltages", "Utility", "Polyphonic");
