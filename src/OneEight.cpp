
#include "OneEight.hpp"

void OneEight::reset() {
	for (int i = 0; i < maxChannels; ++i) {
		_step[i] = 0;
		_clock[i].reset();
		_reset[i].reset();
	}
}

void OneEight::sampleRateChange() {
	for (int i = 0; i < maxChannels; ++i) {
		_timer[i].setParams(APP->engine->getSampleRate(), 0.001f);
	}
}

int OneEight::channels() {
	return std::max(1, std::max(inputs[CLOCK_INPUT].getChannels(), inputs[SELECT_INPUT].getChannels()));
}

void OneEight::processChannel(const ProcessArgs& args, int c) {
	bool reset = _reset[c].process(inputs[RESET_INPUT].getVoltage());
	if (reset) {
		_timer[c].reset();
	}
	bool timer = _timer[c].next();
	bool clock = _clock[c].process(inputs[CLOCK_INPUT].getPolyVoltage(c)) && !timer;

	int steps = clamp(params[STEPS_PARAM].getValue(), 1.0f, 8.0f);
	int reverse = 1 - 2 * (params[DIRECTION_PARAM].getValue() == 0.0f);
	_step[c] = (_step[c] + reverse * clock) % steps;
	_step[c] += (_step[c] < 0) * steps;
	_step[c] -= _step[c] * reset;
	float select = params[SELECT_PARAM].getValue();
	select += clamp(inputs[SELECT_INPUT].getPolyVoltage(c), 0.0f, 10.0f) * 0.1f * 8.0f;
	if (!_selectOnClock || clock) {
		_select[c] = select;
	}
	int step = _step[c] + (int)_select[c];
	step = step % 8;

	if (_channels > 1) {
		float in = inputs[IN_INPUT].getPolyVoltage(c) + !inputs[IN_INPUT].isConnected() * 10.0f;
		for (int i = 0; i < 8; ++i) {
			outputs[OUT1_OUTPUT + i].setChannels(_channels);
			outputs[OUT1_OUTPUT + i].setVoltage((step == i) * in, c);
		}
		if (c == 0) {
			for (int i = 0; i < 8; ++i) {
				lights[OUT1_LIGHT + i].value = step == i;
			}
		}
	}
	else if (!inputs[IN_INPUT].isConnected()) {
		for (int i = 0; i < 8; ++i) {
			outputs[OUT1_OUTPUT + i].setChannels(1);
			outputs[OUT1_OUTPUT + i].setVoltage((step == i) * 10.0f);
			lights[OUT1_LIGHT + i].value = step == i;
		}
	}
	else {
		float* in = inputs[IN_INPUT].getVoltages();
		static float zeroes[maxChannels] {};
		for (int i = 0; i < 8; ++i) {
			outputs[OUT1_OUTPUT + i].setChannels(inputs[IN_INPUT].getChannels());
			outputs[OUT1_OUTPUT + i].writeVoltages((step == i) ? in : zeroes);
			lights[OUT1_LIGHT + i].value = step == i;
		}
	}
}

struct OneEightWidget : SelectOnClockModuleWidget {
	static constexpr int hp = 6;

	OneEightWidget(OneEight* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SvgPanel *panel = new SvgPanel();
			panel->box.size = box.size;
			panel->setBackground(APP->window->loadSvg(asset::plugin(pluginInstance, "res/OneEight.svg")));
			addChild(panel);
		}

		addChild(createWidget<ScrewSilver>(Vec(0, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto stepsParamPosition = Vec(15.5, 131.5);
		auto directionParamPosition = Vec(16.0, 167.5);
		auto selectParamPosition = Vec(9.0, 230.0);

		auto clockInputPosition = Vec(11.5, 35.0);
		auto resetInputPosition = Vec(11.5, 72.0);
		auto selectInputPosition = Vec(11.5, 270.0);
		auto inInputPosition = Vec(11.5, 324.0);

		auto out1OutputPosition = Vec(54.5, 35.0);
		auto out2OutputPosition = Vec(54.5, 76.3);
		auto out3OutputPosition = Vec(54.5, 118.6);
		auto out4OutputPosition = Vec(54.5, 158.9);
		auto out5OutputPosition = Vec(54.5, 200.1);
		auto out6OutputPosition = Vec(54.5, 241.4);
		auto out7OutputPosition = Vec(54.5, 282.7);
		auto out8OutputPosition = Vec(54.5, 324.0);

		auto out1LightPosition = Vec(66.5, 61.5);
		auto out2LightPosition = Vec(66.5, 102.8);
		auto out3LightPosition = Vec(66.5, 145.1);
		auto out4LightPosition = Vec(66.5, 185.4);
		auto out5LightPosition = Vec(66.5, 226.6);
		auto out6LightPosition = Vec(66.5, 267.9);
		auto out7LightPosition = Vec(66.5, 309.2);
		auto out8LightPosition = Vec(66.5, 350.5);
		// end generated by svg_widgets.rb

		{
			auto w = createParam<Knob16>(stepsParamPosition, module, OneEight::STEPS_PARAM);
			dynamic_cast<Knob*>(w)->snap = true;
			addParam(w);
		}
		addParam(createParam<SliderSwitch2State14>(directionParamPosition, module, OneEight::DIRECTION_PARAM));
		{
			auto w = createParam<Knob29>(selectParamPosition, module, OneEight::SELECT_PARAM);
			dynamic_cast<Knob*>(w)->snap = true;
			addParam(w);
		}

		addInput(createInput<Port24>(clockInputPosition, module, OneEight::CLOCK_INPUT));
		addInput(createInput<Port24>(resetInputPosition, module, OneEight::RESET_INPUT));
		addInput(createInput<Port24>(selectInputPosition, module, OneEight::SELECT_INPUT));
		addInput(createInput<Port24>(inInputPosition, module, OneEight::IN_INPUT));

		addOutput(createOutput<Port24>(out1OutputPosition, module, OneEight::OUT1_OUTPUT));
		addOutput(createOutput<Port24>(out2OutputPosition, module, OneEight::OUT2_OUTPUT));
		addOutput(createOutput<Port24>(out3OutputPosition, module, OneEight::OUT3_OUTPUT));
		addOutput(createOutput<Port24>(out4OutputPosition, module, OneEight::OUT4_OUTPUT));
		addOutput(createOutput<Port24>(out5OutputPosition, module, OneEight::OUT5_OUTPUT));
		addOutput(createOutput<Port24>(out6OutputPosition, module, OneEight::OUT6_OUTPUT));
		addOutput(createOutput<Port24>(out7OutputPosition, module, OneEight::OUT7_OUTPUT));
		addOutput(createOutput<Port24>(out8OutputPosition, module, OneEight::OUT8_OUTPUT));

		addChild(createLight<SmallLight<GreenLight>>(out1LightPosition, module, OneEight::OUT1_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out2LightPosition, module, OneEight::OUT2_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out3LightPosition, module, OneEight::OUT3_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out4LightPosition, module, OneEight::OUT4_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out5LightPosition, module, OneEight::OUT5_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out6LightPosition, module, OneEight::OUT6_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out7LightPosition, module, OneEight::OUT7_LIGHT));
		addChild(createLight<SmallLight<GreenLight>>(out8LightPosition, module, OneEight::OUT8_LIGHT));
	}
};

Model* modelOneEight = bogaudio::createModel<OneEight, OneEightWidget>("Bogaudio-OneEight", "1:8", "mux & sequential switch", "Switch");
