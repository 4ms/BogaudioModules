
#include "Offset.hpp"

int Offset::channels() {
	return std::max(1, inputs[IN_INPUT].getChannels());
}

void Offset::processChannel(const ProcessArgs& args, int c) {
	float offset = knobValue(params[OFFSET_PARAM], inputs[OFFSET_INPUT], c);
	float scale = knobValue(params[SCALE_PARAM], inputs[SCALE_INPUT], c);
	scale = scale < 0.0f ? -pow(scale, 2.0f) : pow(scale, 2.0f);
	scale *= 10.0;

	float out = inputs[IN_INPUT].getVoltage(c);
	out += 10.0f * offset;
	out *= scale;
	if (!_disableOutputLimit) {
		out = clamp(out, -12.0f, 12.0f);
	}
	outputs[OUT_OUTPUT].setChannels(_channels);
	outputs[OUT_OUTPUT].setVoltage(out, c);
}

float Offset::knobValue(Param& knob, Input& cv, int c) const {
	float v = knob.getValue();
	if (cv.isConnected()) {
		v *= clamp(cv.getPolyVoltage(c) / 10.0f, -1.0f, 1.0f);
	}
	return v;
}

struct OffsetWidget : DisableOutputLimitModuleWidget {
	static constexpr int hp = 3;

	OffsetWidget(Offset* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SvgPanel *panel = new SvgPanel();
			panel->box.size = box.size;
			panel->setBackground(APP->window->loadSvg(asset::plugin(pluginInstance, "res/Offset.svg")));
			addChild(panel);
		}

		addChild(createWidget<ScrewSilver>(Vec(0, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto offsetParamPosition = Vec(8.0, 40.0);
		auto scaleParamPosition = Vec(8.0, 152.0);

		auto offsetInputPosition = Vec(10.5, 81.0);
		auto scaleInputPosition = Vec(10.5, 193.0);
		auto inInputPosition = Vec(10.5, 243.0);

		auto outOutputPosition = Vec(10.5, 281.0);
		// end generated by svg_widgets.rb

		addParam(createParam<Knob29>(offsetParamPosition, module, Offset::OFFSET_PARAM));
		addParam(createParam<Knob29>(scaleParamPosition, module, Offset::SCALE_PARAM));

		addInput(createInput<Port24>(offsetInputPosition, module, Offset::OFFSET_INPUT));
		addInput(createInput<Port24>(scaleInputPosition, module, Offset::SCALE_INPUT));
		addInput(createInput<Port24>(inInputPosition, module, Offset::IN_INPUT));

		addOutput(createOutput<Port24>(outOutputPosition, module, Offset::OUT_OUTPUT));
	}
};

Model* modelOffset = bogaudio::createModel<Offset, OffsetWidget>("Bogaudio-Offset", "OFFSET", "CV offset and scaler", "Attenuator", "Polyphonic");
